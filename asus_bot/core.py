import csv

from telegram import ReplyKeyboardMarkup
import requests

from validators import validate_email, validate_password
from logger_config import logger

from db import add_new_user, check_user_exists
from parsing_new import recieve_schedule, get_response


HELP_MESSAGE = """–ö–æ–º–∞–Ω–¥—ã:
‚ö™ /start ‚Äì –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É
‚ö™ /–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É asus ‚Äì –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
‚ö™ /my_info ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
‚ö™ /my_schedule ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚ö™ /days_tracking ‚Äì –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
‚ö™ /newcat ‚Äì –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞ üêà‚Äç‚¨õÔ∏è
‚ö™ /help ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
"""


DAYS_TRACKING = 3
BUTTONS = ReplyKeyboardMarkup(
    [['/start', '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É asus'],
     ['/my_info', '/my_schedule'],
     ['/days', '/newcat', '/help']],
    resize_keyboard=True)


def start(update, context):
    logger.info(f'start {update.message.chat.first_name}')
    chat = update.effective_chat
    user = update.message.chat.first_name
    context.bot.send_message(
        chat_id=chat.id,
        text=f'<b>{user}</b>, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∞—Å—É—Å-–±–æ—Ç—É! ü§ñ\n\n',
        reply_markup=BUTTONS,
        parse_mode="HTML"
    )


def help_handle(update, context):
    logger.info(f'help {update.message.chat.first_name}')
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=HELP_MESSAGE,
        reply_markup=BUTTONS)


def days(update, context):
    logger.info(f'days {update.message.chat.first_name}')
    chat = update.effective_chat
    buttons = ReplyKeyboardMarkup(
        [['/start', '/2', '/3'],
         ['/4', '/5', '/6', '/7']], resize_keyboard=True
    )
    context.bot.send_message(
        chat_id=chat.id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
        reply_markup=buttons
    )


def get_new_image():
    URL = 'https://api.thecatapi.com/v1/images/search'
    response = requests.get(URL).json()
    random_cat = response[0].get('url')
    return random_cat


def new_cat(update, context):
    logger.info(f'new_cat {update.message.chat.first_name}')
    print(update.message.text)
    chat = update.effective_chat
    context.bot.send_photo(chat.id, get_new_image())


def registration(update, context):
    print('registration func')
    logger.info(f'registration {update.message.chat.first_name}')
    message = update.message.text
    chat = update.effective_chat
    text_registration = """
–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã (–∏–ª–∏ –ª–æ–≥–∏–Ω) –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–∞—Ä–æ–ª—å
–Ω–∞–ø—Ä–∏–º–µ—Ä:
ivanov abcd1234
ivanov@mariinsky.ru abcd1234
* –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ"""
    if message == '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É asus':
        context.bot.send_message(chat_id=chat.id, text=text_registration)
    elif (
        len(message.split()) == 2
        and validate_password(message.split()[1])
        # and validate_email(message.split()[0])
        # and check_registration(update, context)
    ):
        login = message.split()[0]
        password = message.split()[1]
        tg_id = update.message.chat.id
        name = update.message.chat.first_name
        days = DAYS_TRACKING
        add_new_user(tg_id, name, login, password, days)
    #     return
    # else:
    #     logger.info(f'TypeError {update.message.chat.first_name}')
    #     context.bot.send_message(
    #         chat_id=chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö')


def update_csv(file_path, target_id, new_row, context, update):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ CSV-—Ñ–∞–π–ª–µ –ø–æ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É."""

    rows = []
    found = False
    with open(file_path, mode="r", encoding="utf-8") as file:
        reader = csv.reader(file)
        for row in reader:
            if row == new_row:
                context.bot.send_message(
                    chat_id=target_id,
                    text='–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
                )
                logger.info(
                    f'double registration {update.message.chat.first_name}')
                rows.append(row)
                found = True
            elif row and int(row[0]) == target_id:  # –ò—â–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É
                rows.append(new_row)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                context.bot.send_message(
                    chat_id=target_id,
                    text='–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã'
                    )
                logger.info(
                    f'update registration {update.message.chat.first_name}')
                found = True
            else:
                rows.append(row)  # –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if not found:
        rows.append(new_row)
        context.bot.send_message(
            chat_id=target_id,
            text=('–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã –∏ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è '
                  '–≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ! '
                  '–î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
            )
        logger.info(f'new data has written {update.message.chat.first_name}')

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    with open(file_path, mode="w", encoding="utf-8", newline="") as file:
        writer = csv.writer(file)
        writer.writerows(rows)
        logger.info(f'file has rewritten {update.message.chat.first_name}')


def update_day_csv(file_path, target_id, new_day, context, update):
    logger.info(f'update_day_csv {update.message.chat.first_name}')
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–Ω–∏ –≤ CSV-—Ñ–∞–π–ª–µ –≤ –ø–æ–∏—Å–∫–µ –ø–æ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É."""
    rows = []
    with open(file_path, mode="r", encoding="utf-8") as file:
        reader = csv.reader(file)
        for row in reader:
            if row and int(row[0]) == target_id:
                new_row = row[:-1] + [new_day]
                rows.append(new_row)
            else:
                rows.append(row)
    with open(file_path, mode="w", encoding="utf-8", newline="") as file:
        writer = csv.writer(file)
        writer.writerows(rows)
        logger.info(f'Days has changed {update.message.chat.first_name}')


def my_info(update, context):
    logger.info(f'my_info {update.message.chat.first_name}')
    with open('data.csv', mode="r", encoding="utf-8") as file:
        reader = csv.reader(file)
        for row in reader:
            if row and int(row[0]) == update.effective_chat.id:
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=(f'–í–∞—à –¢–µ–ª–µ–≥—Ä–∞–º ID: {row[0]}\n'
                          f'–ò–º—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º: {row[1]}\n'
                          f'–ü–æ—á—Ç–∞:{row[2]}\n'
                          f'–ü–∞—Ä–æ–ª—å:{row[3]}\n'
                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:{row[4]}'))


def my_schedule(update, context):
    logger.info(f'my_schedule {update.message.chat.first_name}')
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...')
    with open('data.csv', mode="r", encoding="utf-8") as file:
        reader = csv.reader(file)
        for row in reader:
            if row and int(row[0]) == update.effective_chat.id:
                email = row[2]
                password = row[3]
                days = row[4]
                text = recieve_schedule(email, password, days)
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=text,
                    parse_mode="HTML")
                logger.info(f'data received {update.message.chat.first_name}')


def check_registration(update, context):
    print('check_registration func')
    logger.info(f'check_registration {update.message.chat.first_name}')
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...')
    message = update.message.text
    email = message.split()[0]
    password = message.split()[1]
    response = get_response(email, password)
    if response:
        print('status: 200')
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–£–¥–∞—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!')
        logger.info(f'correct registration {update.message.chat.first_name}')
        return True
    print('status NOT 200')
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ!')
    logger.info(f'bad registration trying {update.message.chat.first_name}')
    return False


def two(update, context):
    logger.info(f'two {update.message.chat.first_name}')
    new_days = 2
    update_day_csv(
        "data.csv", update.effective_chat.id, new_days, context, update
    )
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–í—ã –≤—ã–±—Ä–∞–ª–∏ 2 –¥–Ω—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
        reply_markup=BUTTONS
    )


def three(update, context):
    logger.info(f'three {update.message.chat.first_name}')
    new_days = 3
    update_day_csv(
        "data.csv", update.effective_chat.id, new_days, context, update)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–í—ã –≤—ã–±—Ä–∞–ª–∏ 3 –¥–Ω—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
        reply_markup=BUTTONS
    )


def four(update, context):
    logger.info(f'four {update.message.chat.first_name}')
    new_days = 4
    update_day_csv(
        "data.csv", update.effective_chat.id, new_days, context, update)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–í—ã –≤—ã–±—Ä–∞–ª–∏ 4 –¥–Ω—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
        reply_markup=BUTTONS
    )


def five(update, context):
    logger.info(f'five {update.message.chat.first_name}')
    new_days = 5
    update_day_csv(
        "data.csv", update.effective_chat.id, new_days, context, update)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–í—ã –≤—ã–±—Ä–∞–ª–∏ 5 –¥–Ω–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
        reply_markup=BUTTONS
    )


def six(update, context):
    logger.info(f'six {update.message.chat.first_name}')
    new_days = 6
    update_day_csv(
        "data.csv", update.effective_chat.id, new_days, context, update)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–í—ã –≤—ã–±—Ä–∞–ª–∏ 6 –¥–Ω–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
        reply_markup=BUTTONS
    )


def seven(update, context):
    logger.info(f'seven {update.message.chat.first_name}')
    new_days = 7
    update_day_csv(
        "data.csv", update.effective_chat.id, new_days, context, update)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–í—ã –≤—ã–±—Ä–∞–ª–∏ 7 –¥–Ω–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
        reply_markup=BUTTONS
    )
